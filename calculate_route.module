<?php

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Link;
/*
function calculate_route_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {

  $routeName = $route_match->getRouteName();

  $mapping = Yaml::parseFile(
      drupal_get_path('module', 'calculate_route') .
      '/mapping/mapping.settings.yml'
  );

  if (in_array($routeName, array_keys($mapping))) {

    $linkRouteName = $routeName;
    $linkTitle = $mapping[$routeName]['title'];

    // Add an item to the end of the breadcrumb.
    $breadcrumb->addLink(
      Link::createFromRoute(
        $linkTitle,
        $routeName
      )
    );
    $breadcrumb->addCacheContexts(['url.path']);

  }

}*/

// Call Library For Admin Config Page
function calculate_route_page_attachments(array &$page){

  $argumentPage = str_replace(
    '/admin/config/services/calculate-route/config/',
    '',
    \Drupal::service('path.current')->getPath()
  );

  $page['#attached']['library'][] = 'calculate_route/admin-' . $argumentPage;

}

// Reset Library For Google Map Block
// Add Attribute "weight" cause problem if positive value
function calculate_route_library_info_alter(array &$libraries, $module) {

  if ($module === 'calculate_route' && $libraries['google-map']) {

    $apiKey = \Drupal::config('calculate_route.config')->get('api_key');

  	$libraries['google-map']['js'] = array(
  		'https://maps.googleapis.com/maps/api/js?key='.$apiKey.'&libraries=places' => array(
    			'type' => 'external',
          'weight' => -500,
    			'attributes' => array(
  					'defer' => true,
  					'async' => true
  				),
			),
  		'js/cr_init.js' => array(
          'weight' => -1,
      ),
  	);
  }

}

// Transfer Config Value
function calculate_route_preprocess_html(&$variables) {
  $configCR = \Drupal::config('calculate_route.config');

  $variables['#attached']['drupalSettings']['calculate_route']['JS'] = [
    'api_key_is_valid' => $configCR->get('api_key_is_valid')
  ];

  $allSettings = [
    'map',
    'marker',
    'form',
    'appearence',
  ];

  foreach ($allSettings as $settings) {
    $variables['#attached']['drupalSettings']['calculate_route']['JS'] = [
      $settings . '_settings' => $configCR->get($settings)
    ];
  }

}
function calculate_route_preprocess_block(&$variables) {
  // Vérification du nom du bloc.
  if ('local_actions_block' === $variables['plugin_id']) {
    // Récupération du nom de la route.
    $route = \Drupal::routeMatch();
    $routeName = $route->getRouteName();

    // Vérification que nous nous trouvons bien sur la bonne route.
    switch ($routeName) {

      case 'calculate_route.config.settings':
        // Récupération du paramètre 'settings' de la page.
        $settings = $route->getParameter('settings');

        // Modification du lien du btn.
        $variables['content']['calculate_route.back.default.config']
        ['#link']['url']->setRouteParameter(
          'settings',
          $settings
        );

        // Modification du nom du btn.
        $settingsName = ucfirst($settings);
        $btnTitle = "Back to Default Configuration for $settingsName Settings";
        $variables['content']['calculate_route.back.default.config']
          ['#link']['title'] = t($btnTitle);

        break;

    }
  }

}

// Set Theme Page
function calculate_route_theme($existing, $type, $theme, $path){
  return [
    'google_map' => [
      'template' => 'google-map',
      'variables' => ['data' => NULL]
    ],
    'calculate_route_settings' => [
      'template' => 'calculate_route-settings',
      'variables' => ['data' => NULL]
    ],
  ];
}
