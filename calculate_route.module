<?php

use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Link;

function calculate_route_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {

  $routeName = $route_match->getRouteName();

  $mapping = Yaml::parse(
    file_get_contents(
      drupal_get_path('module', 'calculate_route') .
      '/mapping/mapping.settings.yml'
    )
  );

  if (in_array($routeName, array_keys($mapping))) {

    $linkRouteName = $routeName;
    $linkTitle = $mapping[$routeName]['title'];

    // Add an item to the end of the breadcrumb.
    $breadcrumb->addLink(
      Link::createFromRoute(
        $linkTitle,
        $routeName
      )
    );
    $breadcrumb->addCacheContexts(['url.path']);

  }

}

// Call Library For Admin Config Page
function calculate_route_page_attachments(array &$page){

  $argumentPage = str_replace(
    '/admin/config/services/calculate-route/config/',
    '',
    \Drupal::service('path.current')->getPath()
  );

  switch ($argumentPage) {
    case 'api-key':
      $page['#attached']['library'][] = 'calculate_route/admin-api-key';
      break;
    case 'map':
      $page['#attached']['library'][] = 'calculate_route/admin-map';
      break;
    case 'marker':
      $page['#attached']['library'][] = 'calculate_route/admin-marker';
      break;
    case 'form':
      $page['#attached']['library'][] = 'calculate_route/admin-form';
      break;
    case 'appearence':
      $page['#attached']['library'][] = 'calculate_route/admin-appearence';
      break;
    default:
      break;
  }

}

// Reset Library For Google Map Block
// Add Attribute "weight" cause problem if positive value
function calculate_route_library_info_alter(array &$libraries, $module) {

  if ($module === 'calculate_route' && $libraries['google-map']) {

    $apiKey = \Drupal::config('calculate_route.config')->get('api_key');

  	$libraries['google-map']['js'] = array(
  		'https://maps.googleapis.com/maps/api/js?key='.$apiKey.'&libraries=places' => array(
    			'type' => 'external',
          'weight' => -500,
    			'attributes' => array(
  					'defer' => true,
  					'async' => true
  				),
			),
  		'js/cr_init.js' => array(
          'weight' => -1,
      ),
  	);
  }

}

// Transfer Config Value
function calculate_route_preprocess_html(&$variables) {

  $configIsValidApiKey = \Drupal::config('calculate_route.config')->get('api_key_is_valid');
  $variables['#attached']['drupalSettings']['calculate_route']['JS']['api_key_is_valid'] = $configIsValidApiKey;

  $configMapAll = \Drupal::config('calculate_route.config')->get('map');
  $variables['#attached']['drupalSettings']['calculate_route']['JS']['map_settings'] = $configMapAll;


  $configMarkerAll = \Drupal::config('calculate_route.config')->get('marker');
  $variables['#attached']['drupalSettings']['calculate_route']['JS']['marker_settings'] = $configMarkerAll;


  $configFormAll = \Drupal::config('calculate_route.config')->get('form');
  $variables['#attached']['drupalSettings']['calculate_route']['JS']['form_settings'] = $configFormAll;


  $configAppearenceAll = \Drupal::config('calculate_route.config')->get('appearence');
  $variables['#attached']['drupalSettings']['calculate_route']['JS']['appearence_settings'] = $configAppearenceAll;

}

// Set Theme Page
function calculate_route_theme($existing, $type, $theme, $path){
  return [
    'google_map' => [
      'template' => 'google-map',
      'variables' => ['data' => NULL]
    ],
    'calculate_route_settings' => [
      'template' => 'calculate_route-settings',
      'variables' => ['data' => NULL]
    ],
  ];
}
