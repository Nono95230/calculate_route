<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;

/**
 * Implémentation du hook entity insert.
 *
 * Lors de la création d'une marque blanche :
 * _ Génération d'un fichier css contenant
 *   toutes les propriétés/valeurs graphiques.
 *
 * @param Drupal\Core\Entity\EntityInterface $node
 *   Variables.
 */
function ausy_mb_node_insert(EntityInterface $node) {
  // Vérification de l'enregistrement d'un contenu de type ausy_mb.
  if ('ausy_mb' == $node->getType()) {
    // Génération un fichier CSS en correspondance
    \Drupal::service('generate.css')->generateCssFile($node);
  }
}


/**
 * Implémentation du hook entity update.
 *
 * Lors de la modification d'une marque blanche :
 * _ Suppression du fichier css contenant
 *   toutes les propriétés/valeurs graphiques.
 * _ Génération d'un fichier css contenant
 *   toutes les propriétés/valeurs graphiques.
 *
 * @param Drupal\Core\Entity\EntityInterface $node
 *   Variables.
 */
function ausy_mb_node_update(EntityInterface $node) {
  // Vérification de l'enregistrement d'un contenu de type ausy_mb.
  if ('ausy_mb' == $node->getType()) {
    // Suppression du fichier CSS en correspondance
    \Drupal::service('generate.css')->deleteCssFile($node);
    // Re-Génération du fichier CSS
    \Drupal::service('generate.css')->generateCssFile($node);
  }
}


/**
 * Implémentation du hook entity delete.
 *
 * Lors de la suppression d'une marque blanche :
 * _ Suppression du fichier css contenant
 *   toutes les propriétés/valeurs graphiques.
 *
 * @param Drupal\Core\Entity\EntityInterface $node
 *   Variables.
 */
function ausy_mb_node_delete(EntityInterface $node) {
  // Vérification de l'enregistrement d'un contenu de type ausy_mb.
  if ('ausy_mb' == $node->getType()) {
    // Suppression du fichier CSS en correspondance
    \Drupal::service('generate.css')->deleteCssFile($node);
  }
}


/**
 * Implémentation du hook_preprocess_html().
 *
 * Charge l'apparence de la marque blanche sur le site.
 *
 * @param array $variables
 *   A $variables array.
 */
function ausy_mb_preprocess_html(array &$variables) {
  /*

    // Get base url.
    $url = \Drupal::request()->getHost();

    // Check if url exists in "Marque blanche".
    $mbNid = \Drupal::entityQuery('node')
      ->condition('type', 'ausy_mb')
      ->condition('field_mb_url', $url)
      ->execute();

    $mbNid = !empty($mbNid) ? array_shift($mbNid) : [];
    if (!empty($mbNid)) {
      $variables = add_mb_css($variables, $mbNid);
    }

  */

  if (array_key_exists('node', \Drupal::routeMatch()->getParameters()->all())) {
    $node = \Drupal::routeMatch()->getParameters()->all()['node'];
    if ('ausy_mb' == $node->getType()) {
      $variables = add_mb_css($variables, $node->id());
    }
  }

}


/**
 * Charge un fichier CSS sur le site.
 *
 * @param array $variables
 *   Tableau des variables disponibles.
 * @param $mbId
 *   L'id de la marque blanche.
 * @return array
 *   Le tableau de variables modifié.
 */
function add_mb_css(array $variables, $mbId = '') {
  if (!empty($mbId)) {

    $entity = Node::load($mbId);

    // Récupération du chemin de fichier.
    $cssPathFile = \Drupal::service('get.css.path.file')
      ->getCssPathFile($entity);

    if (!empty(Node::load($mbId))) {
      $mbCss = $cssPathFile['file-name'];

      // Envoi du fichier css au template html.
      $variables['page']['#attached']['html_head'][] = [
        [
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'stylesheet',
            'type' => 'text/css',
            'href' => $cssPathFile['file-path-absolute'],
            'media' => 'all',
          ]
        ],
        'ausy_mb_css',
      ];
      $variables['marque_blanche_id'] = $mbCss;
    }
  }

  return $variables;
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * @param $entity_form
 *   Nested array of form elements that comprise the entity form.
 * @param $form_state
 *   The form state of the parent form.
 *//*
function ausy_mb_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface &$form_state) {

  switch ($entity_form['#bundle']) {
    case 'ausy_mb_css_properties':

      $entity_form['field_mb_css_property_color_val']['#states']['visible'] = array(
        array(
          'select[name="field_mb_css_properties[form][inline_entity_form][field_mb_css_property_name]"]' => array(
            'value' => 'background-color'
          )
        ),
        'xor',
        array(
          'select[name="field_mb_css_properties[form][inline_entity_form][field_mb_css_property_name]"]' => array(
            'value' => 'color'
          )
        )
      );

      $entity_form['field_mb_css_property_val_ff']['#states']['visible'] = array(
        array(
          'select[name="field_mb_css_properties[form][inline_entity_form][field_mb_css_property_name]"]' => array(
            'value' => 'font-family'
          )
        )
      );

      $entity_form['field_mb_css_property_value']['#states']['visible'] = array(
        array(
          'select[name="field_mb_css_properties[form][inline_entity_form][field_mb_css_property_name]"]' => array(
            'value' => 'font'
          )
        ),
        'xor',
        array(
          'select[name="field_mb_css_properties[form][inline_entity_form][field_mb_css_property_name]"]' => array(
            'value' => 'background'
          )
        )
      );

      break;

    default:
      break;
  }

}
*/
